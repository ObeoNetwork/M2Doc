h1. M2Doc User Guide


h2. Template authoring

The M2Doc technology adopts an approach where the document authoring tools (Libre Office, Open Office, MS Word) are leverage as much as possible. What other tool is more adapted to style and static part authoring? 

Furthermore, these tools are quite common and widely adopted so that there's no *_necessity_*   to learn yet another document authoring tool. Last but not least, there's a great deal of document models legacy all over the places that should be reused as easily as possible.

 

Templates are made of static parts and dynamic parts. Static parts are produced in the generated document as they are in the templates while dynamic parts are replaced by some text which depends on the provided input models. Dynamic parts are provided in fields so that there's always a clear separation between static and dynamic parts.   


h3. How to cope with field codes

The edition of template must be made in a mode where field codes are visible. In MS Word, you can toggle this mode on/off by pressing Alt-F9. When the mode is on, you should see {field} like the next picture shows:  !images/image001.png!    

To insert a new field, press Ctrl-F9. You obtain an empty field like this: !images/image002.png!  That you must edit to provide the code and instructions. 

The next section gives all the details that are necessary to edit M2Doc generation tags. Alternatively, if you start you're template from the provided model (templateModel.dotx),  you can use the Insert > QuickPart > AutoText to insert M2Doc generation tags. Once you know the tag, it might be faster to just edit them.

You must toggle field codes on to read this document.


h3. M2Doc static generation tags

M2Doc provides some generation tags that have fixed formats. Those tags are described below:


* @{m:<query>}@ : the directive is replaced with the string representation of the query's evaluation result 

* @{m:for <var> | <query>} iterated body { m:endfor }@ : the directive is replaced by the iterated generation of the body over a collection of values. The specified variable is successively bound to the values of the evaluated collection so that it is accessible from queries inside the body.

* @{m:if <expression1>} true branch { m:elseif <expression2> }  { m:elseif <expression-n>} { m:else } {m:endif }@ : conditional generation. The first branch among the if and elseif directives which expression evaluates to true is processed. If no expression evaluates to true, the else branch is processed (if present).

* @{m:image file:"image file path" width:"image insertion width"  height:"image insertion height" legend:"image legend" legendPos:"above/below"}@ : inserts the image which file is specified (through a path relative to the eclipse project where the generation model is placed). The insertion will have the specified width, height and a legend will be inserted at the specified position if one is specified (default is below).

* @{m:bookmark <name query>} book marked content { m:endbookmark }@ : creates a book mark with a name (name query) and a content (book marked content).

* @{m:userdoc <query>} user document content {enduserdoc}@ : This tag in template produces following document part  @{m:userContent <id>} Generated user document content {endContent}@ in generated document if generated document doesn't already exist. If it already exists the usercontent part with good id of old document is copied in the new generated document. Be careful, if in old generated document a usercontent with an id whose never been produced by template generation, the old usercontent will be lost. 
** Known limitation : Tables in userContents contained by a table are not supported.

* @{m:link <book mark name query> <text query>}@ : creates a link to a book mark. The "book mark name query" is the same name as the one defines in {m:bookmark <name query>}. "text query" is the text used for the reference.
		
pre.. 
		Example:
			{m:bookmark 'myBookmark'} my bookmark content { m:endbookmark }
			{m:link 'myBookmark' 'reference to myBookmark'}
		will produce: 
			my bookmark content { REF myBookmark \h }
		
h3. M2Doc dynamic generation tags

M2Doc provides a way to extend its information retrieval for a tag by registering a provider by an extension point. Each provider uses its own options in addition of the one generically provided par M2Doc core. Many providers can be associated to a same kind of tag and any one of those can be choose to retrieve information in a tag. 


h4. Sirius diagram provider

M2doc gives a way to insert Sirius diagrams: you have to install the Sirius provider feature coming with M2Doc installation.

The diagram tag has the following syntax: @{m:diagram}@, with the following options:

* __title__ : AQL expression, mandatory if you want to get a diagram by its name. Be careful, as it is an AQL expression, if you just want to put a string, you have to add some'' around the string: title:"'diagram name'",

* __width__ : integer, optional, by default the diagram export real width,

* __height__ : integer, optional, by default the diagram export real height,

* __layers__ : string list, optional, to define the layers to display (the default layer is always displayed),

* __provider__ : Java class qualified name, optional. Use to define your own way to get a Sirius diagram.

The default way to get a diagram is by its name. If several diagrams have the same name, it will get the first.

However, if the behavior is not enough, you can define your own diagram provider and refers it in 'provider' option tag. See the developer guide to add one.

Some examples:

* @m:diagram title:"'Diagram name'"@: get the first diagram named 'Diagram name' in the modeling project. The diagram size is the export image size. 

* @m:diagram title:"self.name"@: if 'self.name' is 'My Diagram', get the first diagram named 'My Diagram' in the modeling project. 

* @m:diagram title:"'Diagram name'" width:"200" height:"200"@:  get the first diagram named 'Diagram name' in the modeling project. The diagram picture will be resize to 200x200.

* @m:diagram title:"'Diagram name'" layers:"layer1, layer2"@: get the first diagram named 'Diagram name' in the modeling project and apply the two layers layer1 and layer2. The current diagram is not modified.

**Warning**: do not forget the ' around the string in an AQL Expression: @title:"'Diagram name'"@

h4. Sirius table providers

M2Doc provides a way to insert tables in a word document that will reproduce sirius table representations.

The table tag has the following syntax: @{m:wtable}@. We chose to use 'wtable' instead of 'table' to avoid as much as possible name conflicts with existing M2Doc templates in which 'table' could have been used as a variable name.

M2Doc provides two implementations of table providers, one based on the table title, the other based on a representation ID and a model object.

* By title:
** __title__ AQL expression, used to identify the table(s) to output in the document. The AQL expression is evaluated, and only those tables that have this __title__ are output in the document.
* By ID of representation and model object:
** __descriptionId__ String, represents the ID of the table description in the Sirius design model (*.odesign file)
** __object__ AQL Expression, used to identify the object on which to retrieve the table(s). All the table representations described by __descriptionId__ and attached to this __object__ will be output in the document.
* Generic options:
** __hideTitle__: boolean, defaults to @false@. Can be used to not insert a title above the table in the output document.
** __provider__: String, can be used to explicitly use a registered table provider. The option must then contain the qualified name of the provider class to use. This class must however be registered by the extension point mechanism.

Some examples:

* @m:wtable title:"'Table name'" hideTitle:"true"@: Generate all the table representations named 'Table name' in the modeling project into the output document, without preceding these tables by their title.
* @m:wtable descriptionId:"<Technical ID of table description, as declared in odesign>" object:"myVariable"@: Generate all the table representations attached to the object referred by @myVariable@ (which could be a more complex AQL expression) and whose representation ID is '<Technical ID of table description, as declared in odesign>' into the output document.

**Warning**: do not forget the single quotes ' around the string in an AQL Expression: @title:"'Table name'"@. The description ID does not need such quotes because it is of type String.

h4. Update strategy for Sirius Representation

When we want to insert a SIRIUS representation in the generated doc with a {m:diagram} or a {m:wtable} tag, it can be the case that the representation and the semantics model are unsynchronized. To cope with this situation, we introduced a parameter in the genConf model that allows users to specify whether representations must be refreshed before the M2Doc generation or not.

!images/image019.png!

The boolean parameter "refreshRepresentations" can be used to define following update strategy : 
- if it is set to false, the M2Doc generation is done with the graphical model as is without re-synchronising it with the semantic model
takes the state of graphical model without update it
- if it is set to true, the graphical model is synchronized with the semantics model before the M2Doc generation is done.

By default, the parameter is set to false.

Be careful, the automatic update of representations can be time-consuming and enabling it can have a high impact on the generation time, especially on large models.

In the case where automatic update of representations is enabled, if the inserted SIRIUS view is not open, the update and arrange effect is automatically saved in the graphical model. In the other case, if the inserted SIRIUS view is open and in the dirty state, the arrange and update is done on the open view and your representation will remain in the dirty state  until you save your graphical diagram. 

h3. Document generation and style

The style of the fragments of generated documents is determined by the style of the templates parts. 

* Iteration: there's no text style in the tag itself. The style of the body is reproduced as is. The style of the paragraph holding the opening __m:for__  tag, however, is reproduced throughout the iterations.

* Conditional: there's no text style in the tag itself. The style of the branch's bodies are reproduced as is.

* Image: there's no text style associated to this style. The paragraph style is reproduced thought. 

* Queries: the style of the first run of the expression is used to generate the text that replaces the query's field. For instance, @{m:table.comments}@  will produce comments in orange while <code>{m:table.comments}</code> will produce comments in black.


h3. How to create dynamic tables

There's no specific tag required to create a dynamic table. Here is an example of a dynamic table description to provide a database table's details:              

!images/image018.png! 


bc. Table { SEQ Tableau \* ARABIC } : tables description

It is sufficient to enclose the dynamic part in a generation tag. Here, we have a simple iteration tag. We could have a combination of iteration and conditional tags or whatever other combinations is necessary.

Note: invisible characters might sneak in between the two table fragments (the header and the iterated body). Toggle on the mode where these characters are shown and remove them, if there are any, after the for tag. 


h3. How to create dynamic lists

Creation of dynamic lists is quite similar to dynamic tables: there's no specific tag required. As bulleted or numbered lists are style attributes the style is carried from the template to the generated doc as is: 

Tables for database { m:db.name }

{ m:for table | db.tables }

* { m:table.name } : 
** { m:for col | table.columns }{ m:col.name } : { m:col.comments }
** { m:endfor }
* { m:endfor }

Note: for the bullets to be correctly spaced and so that there's no spurious carriage return introduced, the endfor tags must be on bullets at the same level as the corresponding tag (as above).


h3. How to create dynamic hyperlinks

Hyperlinks are WORD fields looking like the following example {HYPERLINK "http://www.obeo.fr"}.

If you want to dynamically retrieve the link with an AQL expression, it is possible. Just adds the request in a WORD field in the double quote like that:

@{HYPERLINK "m:" http://www.obeo.fr "}@

**Warning**  : This feature is currently an experimental one. In some context it may be not working.

 


h3. Headings and tables of contents

Headings are just treated like tables and lists are: the style makes it all. 

Here's how we would create headings that corresponds to a database tables:

@{ m:for table |db.tables }@ Table <code>{ m:table.name }</code>
Description: @{ m:table.comments }@
@{ m:for col |table.columns }@ Column <code>{ m:col.name }</code>
Description : @{ m:col.comments }@
@{ m:endfor }@
@{ m:endfor }@

Insertion of table of contents has no interactions with the templating. The table of content is just a field which is processed by Word which collects all the headings. The only requirement is to make an update of the field right after document generation. 


h3. Define variables

To write AQL expressions, variables are useful to simplify the syntax and to have an easy access to model elements.

Variables can be defined in the template document with template properties:

!images/image003.png! 
  
With this example, we can write AQL expressions like @m:author@ or <code>m:db.name</code>.

The variables names have to be set with @m:var:@ prefix: @m:var:author@ will define 'author' variable. The variable values defines the variable type (author is a string and db a model element database::DataBase). 

The only scalar type supported is 'string'. To declare the complex type of an object, you have to set its domain class like in AQL syntax: @prefix::ClassName@ (database::DataBase).


These variables are automatically imported in the configuration model where you can set their values. If you do not define the variable in the template document, you will have to do it in the configuration model (see Configure variables definitions paragraph) .

 
h4. Dedicated pop-up editor

A small editor is available to make it easier to define the template's variables. This editor is accessible within eclipse and avoids the need to use the impractical dialog to enter custom properties in MS Word.

To open this editor, right-clicki on the template (after copy/pasting it into a project in an eclipse instance with M2Doc installed):

!images/configure_variables.png!

h5. Configuring the meta-model URIs

The first tab of this editor allows users to define the meta-models used by the template (this is useful to then set the types of the template's variables, such as @database::DataBase@ and to validate the template).
 
To set the meta-model(s) used by the template, click on the Add button and select the meta-model.

!images/config_var_mm.png!

A meta-model URI can be added by clicking on the add button. A meta-model can be removed by selecting its line and clicking on the delete button.
The URI of a meta-model can be edited in place by directly cliking on it in the table.

When adding a new meta-model URI, the following pop-up will open to display the registered meta-models. It is possible to filter the list to find the right one more quickly. '*' is used as a wildcard character.

!images/config_var_mm_select.png!

h5. Configuring the variables

The second tab of the dialog allows the declaration of template variables.

!images/config_var_var.png!

* The name of a variable can be edited directly by clicking on it in the table
* The type (and name) of an existing variable can be edited by click on it in the table, and then clicking on the '...' button that appears in the table cell. This will open a dialog to edit the variable.
* A new variable can be added by clicking on the add button. This will open a dialog to edit the new variable
* An existing variable can be removed by selecting it and then clicking on the delete button

When editing an existing variable or a new one, the following dialog is used:

!images/config_var_var_edit.png!

This dialog allows to set the variable's name and type.
The variable's type can be either entered directly by hand in the lowest field, using the usual syntax @database::DataBase@. Or it can be manually selected by first selecting the meta-model (either 'Scalar Types' for the 'string' type or any meta-model registered in the first tab) and then selecting the relevant EClassifier in the table.

h3. Miscellaneous

* Adding dynamic content in headers and footers is simply done by inserting generation tags in the header and footer. 

* Dynamic content in text area isn't supported yet. Any generation tag that appears in a text area will just be reproduced as is and won't be processed as a generation tag.

 


h2. Documentation generation

As of now, custom properties are not implemented and a generation configuration model must be used to generate a document from a template. 

Document generation is done in three steps:

* Template authoring (in a modeling project)

* Generation configuration with the creation of a configuration model which binds values to variables

* Generation itself

We provide a step by step tutorial that explains how to generate a document from a database model. To start with, M2Doc and the database DSL must be installed in your bundle. Then, import the example modeling project (org.obeonetwork.m2doc.dbexample) in your workspace. (File>Import>General>Existing Project into Workspace). The example project in on github: __https://github.com/ObeoNetwork/M2Doc/tree/master/doc/example/org.obeonetwork.m2doc.dbexample__ .

Open the project. You should have this folder layout:
!images/image004.png!


We will keep the existing configuration model (.genconf) and create another one to document the procedure.


h3. Initialize the configuration model

First, initialize the configuration model: right click on the template file >Initialize Documentation Configurations:

!images/image005.png!

The configuration model is created by default near the template.

!images/image006.png!

You will have to set those two URIs in the Package NSURI attribute: 

* http://www.obeonetwork.org/dsl/database/1.0

* http://www.obeonetwork.org/dsl/typeslibrary/1.0

If you are in a Modeling project with a database model and have installed M2Doc Sirius extension, these two URIS are set automatically. 

and the result file name.

The resulting property sheet should look like this:

!images/image007.png!


h3. Configure variables definitions

Now, you have to configure the variables definitions. If these variables are set in the template file, they are automatically added to the configuration model and you just need to value them.

Otherwise, you have to create these variables definitions.


h4. Manage variables with M2Doc Sirius viewpoint


 A Sirius viewpoint __M2Doc__  is activated on the __org.obeonetwork.m2doc.dbexample__  example project.  In the configuration diagram on Generation element, you can manage the variables definitions.

Two kind of variable definitions can be created:

* string definition: to add one, use the palette tool and set the key and the value (direct edit or properties view)

!images/image008.png!

 

*  model definition: to add one, select the model element value in the model explorer and drag n drop it into the diagram and set the key name (direct edit or property view).

You can also use the palette tool and select the model element value.

!images/image009.png!


h4. Create variable with EMF Editor

If you do not have Sirius, you have to set the variable via the genconf EMF Editor:

First, you have to load the main database resource: 

 !images/image010.png!

Select the database model that is in the model directory:

!images/image011.png!

Now that the database resource is loaded, we will be able to use model element in it as variable's values. 

We first create a string variable, key='author', value='John Doe':

!images/image012.png!

And a model variable:

!images/image013.png!

Set the values of the variables in the property view. The model variable must be defined like follows:

!images/image014.png!


h3. Generate documentation

You just have to invoke the generation by right clicking on the generation model element:

!images/image015.png!

A message indicates everything went well:

!images/image016.png!

Refresh the 'doc' directory if needed. The result should be in it. 


h3. Template validation

When the generation is launched, we first run a template validation. If this validation gets errors, an error file will be generated near the generated result file.

The template validation can also be started alone, if it gets errors, an error file will be generated near the template file.

!images/image017.png!

The template validation checks:

*  M2Doc syntax,

*  AQL expression syntax and and typing,

* Feature and services called in AQL expressions exist,

* Variables syntax and typing.

 

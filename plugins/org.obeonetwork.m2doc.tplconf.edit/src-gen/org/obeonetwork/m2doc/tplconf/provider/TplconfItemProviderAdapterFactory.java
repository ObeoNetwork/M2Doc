/**
 */
package org.obeonetwork.m2doc.tplconf.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.obeonetwork.m2doc.tplconf.util.TplconfAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!--
 * end-user-doc -->
 * 
 * @generated
 */
public class TplconfItemProviderAdapterFactory extends TplconfAdapterFactory
        implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement
     * {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     * 
     * @generated
     */
    public TplconfItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.obeonetwork.m2doc.tplconf.EPackageMapping} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected EPackageMappingItemProvider ePackageMappingItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.obeonetwork.m2doc.tplconf.EPackageMapping}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createEPackageMappingAdapter() {
        if (ePackageMappingItemProvider == null) {
            ePackageMappingItemProvider = new EPackageMappingItemProvider(this);
        }

        return ePackageMappingItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.obeonetwork.m2doc.tplconf.TemplateVariable} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected TemplateVariableItemProvider templateVariableItemProvider;

    /**
     * This creates an adapter for a
     * {@link org.obeonetwork.m2doc.tplconf.TemplateVariable}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createTemplateVariableAdapter() {
        if (templateVariableItemProvider == null) {
            templateVariableItemProvider = new TemplateVariableItemProvider(this);
        }

        return templateVariableItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.obeonetwork.m2doc.tplconf.ScalarType} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected ScalarTypeItemProvider scalarTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.obeonetwork.m2doc.tplconf.ScalarType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createScalarTypeAdapter() {
        if (scalarTypeItemProvider == null) {
            scalarTypeItemProvider = new ScalarTypeItemProvider(this);
        }

        return scalarTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.obeonetwork.m2doc.tplconf.StructuredType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    protected StructuredTypeItemProvider structuredTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.obeonetwork.m2doc.tplconf.StructuredType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createStructuredTypeAdapter() {
        if (structuredTypeItemProvider == null) {
            structuredTypeItemProvider = new StructuredTypeItemProvider(this);
        }

        return structuredTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all
     * {@link org.obeonetwork.m2doc.tplconf.TemplateConfig} instances. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    protected TemplateConfigItemProvider templateConfigItemProvider;

    /**
     * This creates an adapter for a {@link org.obeonetwork.m2doc.tplconf.TemplateConfig}.
     * <!-- begin-user-doc
     * --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createTemplateConfigAdapter() {
        if (templateConfigItemProvider == null) {
            templateConfigItemProvider = new TemplateConfigItemProvider(this);
        }

        return templateConfigItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
     * <!-- begin-user-doc --> <!--
     * end-user-doc -->
     * 
     * @generated
     */
    protected StringToTypeMapEntryItemProvider stringToTypeMapEntryItemProvider;

    /**
     * This creates an adapter for a {@link java.util.Map.Entry}. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter createStringToTypeMapEntryAdapter() {
        if (stringToTypeMapEntryItemProvider == null) {
            stringToTypeMapEntryItemProvider = new StringToTypeMapEntryItemProvider(this);
        }

        return stringToTypeMapEntryItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to
     * {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!-- end-user-doc
     * -->
     * 
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. <!--
     * begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated
     */
    public void dispose() {
        if (templateConfigItemProvider != null)
            templateConfigItemProvider.dispose();
        if (ePackageMappingItemProvider != null)
            ePackageMappingItemProvider.dispose();
        if (templateVariableItemProvider != null)
            templateVariableItemProvider.dispose();
        if (scalarTypeItemProvider != null)
            scalarTypeItemProvider.dispose();
        if (structuredTypeItemProvider != null)
            structuredTypeItemProvider.dispose();
        if (stringToTypeMapEntryItemProvider != null)
            stringToTypeMapEntryItemProvider.dispose();
    }

}
